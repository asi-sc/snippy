# RUN: llvm-snippy %s -march=riscv64-linux-gnu -mattr=+c -dump-mf \
# RUN: -num-instrs=200 -memory-access-mode=store-burst \
# RUN: -memory-access-burst-group-size=3 |& FileCheck %s \
# RUN: -check-prefix=STORE

# RUN: llvm-snippy %s -march=riscv64-linux-gnu -mattr=+c -dump-mf \
# RUN: -num-instrs=200 -memory-access-mode=store-burst \
# RUN: -model-plugin=None \
# RUN: -memory-access-burst-group-size=3 |& FileCheck %s \
# RUN: -check-prefix=STORE-ERR

# RUN: llvm-snippy %s -march=riscv64-linux-gnu -mattr=+c -dump-mf \
# RUN: -num-instrs=200 -memory-access-mode=load-burst \
# RUN: -memory-access-burst-group-size=3 |& FileCheck %s \
# RUN: -check-prefix=LOAD

# RUN: llvm-snippy %s -march=riscv64-linux-gnu -mattr=+c -dump-mf \
# RUN: -num-instrs=200 -memory-access-mode=load-burst \
# RUN: -model-plugin=None \
# RUN: -memory-access-burst-group-size=3 |& FileCheck %s \
# RUN: -check-prefix=LOAD-ERR

# RUN: llvm-snippy %s -march=riscv64-linux-gnu -mattr=+c -dump-mf \
# RUN: -num-instrs=200 -memory-access-mode=mixed-burst \
# RUN: -memory-access-burst-group-size=3 |& FileCheck %s \
# RUN: -check-prefix=MIXED

# RUN: llvm-snippy %s -march=riscv64-linux-gnu -mattr=+c -dump-mf \
# RUN: -num-instrs=200 -memory-access-mode=load-store-burst \
# RUN: -memory-access-burst-group-size=3 |& FileCheck %s \
# RUN: -check-prefix=LOADSTORE

# Generate many instructions to have extremely high probability that desired
# pattern wasn't met because it cannot be emitted. It's not the most robust test
# case. Please, improve it if you have better ideas.
# RUN: llvm-snippy %s -march=riscv64-linux-gnu -mattr=+c -dump-mf \
# RUN: -num-instrs=1000 -memory-access-mode=load-store-burst \
# RUN: -model-plugin=None \
# RUN: -memory-access-burst-group-size=3 |& FileCheck %s \
# RUN: -check-prefix=LOADSTORE-ERR

# RUN: llvm-snippy %s -march=riscv64-linux-gnu -mattr=+c -dump-mf \
# RUN: -num-instrs=500 -memory-access-mode=mixed-burst \
# RUN: -memory-access-burst-group-size=100 |& FileCheck %s \
# RUN: -check-prefix=MIXED-HUGEGROUP

sections:
    - no:        1
      VMA:       0x80000000
      SIZE:      0x400000
      LMA:       0x80000000
      ACCESS:    rx
    - no:        2
      VMA:       0x80600000
      SIZE:      0x400000
      LMA:       0x80600000
      ACCESS:    rw

histogram:
    - [C_LW, 1.0]
    - [C_SW, 1.0]
    - [C_SD, 1.0]
    - [ADD, 1.0]
    - [XOR, 1.0]
    - [AND, 1.0]

# STORE-COUNT-3: {{((C_SW)|(C_SD))}}
# STORE-NOT: {{((C_SW)|(C_SD))}}
# STORE-COUNT-3: {{((C_SW)|(C_SD))}}
# STORE-NOT: {{((((C_SW)|(C_SD)).*[[:space:]].*){4})}}

# STORE-ERR: {{((((C_LW)).*[[:space:]].*))}}
# STORE-ERR-NOT: {{((((C_LW)).*[[:space:]].*){2})}}

# LOAD-COUNT-3: {{((C_LW))}}
# LOAD-NOT: {{((C_LW))}}
# LOAD-COUNT-3: {{((C_LW))}}
# LOAD-NOT: {{((((C_LW)).*[[:space:]].*){4})}}

# LOAD-ERR: {{((((C_SW)|(C_SD)).*[[:space:]].*))}}
# LOAD-ERR-NOT: {{((((C_SW)|(C_SD)).*[[:space:]].*){2})}}

# MIXED-COUNT-3: {{((C_SW)|(C_SD)|(C_LW))}}
# MIXED-NOT: {{((C_SW)|(C_SD)|(C_LW))}}
# MIXED-COUNT-3: {{((C_SW)|(C_SD)|(C_LW))}}
# MIXED-NOT: {{((((C_SW)|(C_SD)|(C_LW)).*[[:space:]].*){4})}}

# LOADSTORE-COUNT-3: {{((C_SW)|(C_SD))}}
# LOADSTORE-COUNT-3: {{((C_LW))}}
# LOADSTORE-COUNT-3: {{((C_SW)|(C_SD))}}
# LOADSTORE-COUNT-3: {{((C_LW))}}
# LOADSTORE-NOT: {{((((C_SW)|(C_SD)).*[[:space:]].*){4})}}
# LOADSTORE-NOT: {{((((C_LW)).*[[:space:]].*){4})}}

# Check that we have burst groups of either loads and stores but they are not mixed.
# LOADSTORE-ERR-COUNT-3: {{((C_SW)|(C_SD))}}
# LOADSTORE-ERR-COUNT-3: {{((C_LW))}}
# LOADSTORE-ERR-NOT: {{(((C_LW)).*[[:space:]].*)(((C_SW)|(C_SD)).*[[:space:]].*)(((C_LW)).*[[:space:]].*)}}

# MIXED-HUGEGROUP-COUNT-100: {{((C_SW)|(C_SD)|(C_LW))}}
# MIXED-HUGEGROUP-NOT: {{((C_SW)|(C_SD)|(C_LW))}}
# MIXED-HUGEGROUP-COUNT-100: {{((C_SW)|(C_SD)|(C_LW))}}
